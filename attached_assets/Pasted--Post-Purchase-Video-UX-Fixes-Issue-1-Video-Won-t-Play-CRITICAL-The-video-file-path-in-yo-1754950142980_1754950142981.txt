# Post-Purchase Video & UX Fixes

## Issue 1: Video Won't Play (CRITICAL)

The video file path in your database shows local file paths, not public URLs. This is why the video won't load.

### Check Current Video URL Structure
First, debug what URL the video player is trying to load:

```javascript
// In VideoDetail.tsx, add debugging for video URLs
useEffect(() => {
  console.log('=== VIDEO PLAYBACK DEBUG ===');
  console.log('Video data:', videoData);
  console.log('Video URL:', videoData?.video_url);
  console.log('File path:', videoData?.file_path);
  console.log('Video source being used:', videoData?.video_url || videoData?.file_path);
  console.log('============================');
}, [videoData]);
```

### Fix Video URL Generation
The issue is your video URLs are file paths like `/tmp/uploads/video.mp4` instead of public Supabase URLs. Fix this:

```javascript
// In your video upload process, ensure you're getting public URLs
const uploadVideo = async (videoFile) => {
  // Upload to Supabase Storage
  const fileName = `${Date.now()}_${videoFile.name}`;
  const { data: uploadData, error: uploadError } = await supabase.storage
    .from('videos')  // Your bucket name
    .upload(fileName, videoFile);
  
  if (uploadError) throw uploadError;
  
  // Get the PUBLIC URL (not file path)
  const { data: publicUrlData } = supabase.storage
    .from('videos')
    .getPublicUrl(fileName);
  
  console.log('Public URL generated:', publicUrlData.publicUrl);
  
  // Save this public URL to database
  const { data: video, error: dbError } = await supabase
    .from('videos')
    .insert({
      title: formData.title,
      video_url: publicUrlData.publicUrl,  // Use public URL, not file path
      // ... other fields
    });
};
```

### Temporary Fix for Existing Videos
For videos already uploaded with wrong URLs, you can fix them:

```javascript
// One-time fix for existing videos
const fixExistingVideoUrls = async () => {
  const { data: videos } = await supabase
    .from('videos')
    .select('*')
    .like('video_url', '%/tmp/%');  // Find videos with local paths
  
  for (const video of videos) {
    // Extract filename from path
    const fileName = video.video_url.split('/').pop();
    
    // Generate proper public URL
    const { data: publicUrlData } = supabase.storage
      .from('videos')
      .getPublicUrl(fileName);
    
    // Update database
    await supabase
      .from('videos')
      .update({ video_url: publicUrlData.publicUrl })
      .eq('id', video.id);
  }
};
```

## Issue 2: Fix "More from Creator" Debug

Add extensive debugging to see why creator videos aren't loading:

```javascript
// In VideoDetail.tsx, add comprehensive debugging
useEffect(() => {
  console.log('=== MORE FROM CREATOR DEBUG ===');
  console.log('Video data:', videoData);
  console.log('Creator ID:', videoData?.creator_id);
  console.log('Current video ID:', videoData?.id);
  
  // Test direct API call
  if (videoData?.creator_id) {
    fetch(`/api/creators/${videoData.creator_id}/videos?exclude=${videoData.id}`)
      .then(res => {
        console.log('API Response status:', res.status);
        return res.json();
      })
      .then(data => {
        console.log('API Response data:', data);
      })
      .catch(err => {
        console.error('API Error:', err);
      });
  }
  console.log('==============================');
}, [videoData]);

// Check if the API endpoint exists
const testCreatorAPI = async () => {
  try {
    const response = await fetch(`/api/creators/${videoData?.creator_id}/videos`);
    console.log('Creator API test:', response.status, await response.text());
  } catch (error) {
    console.error('Creator API missing or broken:', error);
  }
};
```

If the API doesn't exist, create it:

```javascript
// In server/routes or api folder - create /api/creators/:creatorId/videos
app.get('/api/creators/:creatorId/videos', async (req, res) => {
  try {
    const { creatorId } = req.params;
    const { exclude } = req.query;
    
    console.log('Creator videos API called:', { creatorId, exclude });
    
    let query = supabase
      .from('videos')
      .select('*')
      .eq('creator_id', creatorId)
      .order('created_at', { ascending: false });
    
    if (exclude) {
      query = query.neq('id', parseInt(exclude));
    }
    
    const { data: videos, error } = await query;
    
    if (error) {
      console.error('Database error:', error);
      return res.status(500).json({ error: error.message });
    }
    
    console.log('Found creator videos:', videos?.length);
    res.json(videos || []);
  } catch (error) {
    console.error('Creator videos API error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});
```

## Issue 3: Fix Light/Dark Mode Switching

Check your CSS/theme classes after purchase. The issue might be:

```javascript
// Check if purchase success adds dark mode classes
// In your success page or after purchase, ensure consistent theme
useEffect(() => {
  // Force light mode consistency
  document.documentElement.classList.remove('dark');
  document.body.classList.remove('dark');
}, []);
```

Or check if Stripe success page is adding dark mode styles.

## Issue 4: Fix Duration Display

Update your VideoDetail to handle missing duration:

```javascript
// In VideoDetail.tsx
const formatDuration = (seconds) => {
  if (!seconds || seconds === 0) {
    return 'Duration not available';
  }
  
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  const remainingSeconds = seconds % 60;
  
  if (hours > 0) {
    return `${hours}:${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
  }
  return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
};

// In JSX, show proper message
<span>Duration: {formatDuration(videoData?.duration_seconds)}</span>
```

For new uploads, capture duration:

```javascript
// In video upload component
const getVideoDuration = (file) => {
  return new Promise((resolve) => {
    const video = document.createElement('video');
    video.preload = 'metadata';
    video.onloadedmetadata = () => {
      resolve(Math.round(video.duration));
    };
    video.src = URL.createObjectURL(file);
  });
};

// Use during upload
const duration = await getVideoDuration(videoFile);
// Save duration to database
```

## Issue 5: Hide Video ID from Purchase Success

In your purchase success component:

```javascript
// Remove or hide Video ID from user-facing purchase confirmation
// In purchase success page, remove this line:
// Video ID: {videoId}

// Keep it for internal logging only
console.log('Internal video ID:', videoId);
```

## Priority Testing Order

1. **ðŸ”¥ First**: Fix video playback URL issue
2. **ðŸ“º Second**: Debug and fix "More from Creator" API
3. **ðŸŽ¨ Third**: Fix theme switching and duration display
4. **âœ¨ Fourth**: Hide Video ID from users

## Expected Results After Fixes
âœ… Video plays after purchase  
âœ… "More from Creator" shows 3-4 videos from same creator  
âœ… Consistent light/dark theme  
âœ… Duration shows actual time or "Duration not available"  
âœ… Clean purchase confirmation without technical details  

The video playback fix is most critical - without proper public URLs, purchased videos won't play!